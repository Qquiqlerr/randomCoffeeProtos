// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: meet/meet.proto

package meet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeetService_GetHistory_FullMethodName  = "/meet.MeetService/GetHistory"
	MeetService_GetFuture_FullMethodName   = "/meet.MeetService/GetFuture"
	MeetService_ApproveMeet_FullMethodName = "/meet.MeetService/ApproveMeet"
	MeetService_CreateMeet_FullMethodName  = "/meet.MeetService/CreateMeet"
)

// MeetServiceClient is the client API for MeetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetServiceClient interface {
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	GetFuture(ctx context.Context, in *GetFutureRequest, opts ...grpc.CallOption) (*GetFutureResponse, error)
	ApproveMeet(ctx context.Context, in *ApproveMeetRequest, opts ...grpc.CallOption) (*ApproveMeetResponse, error)
	CreateMeet(ctx context.Context, in *CreateMeetRequest, opts ...grpc.CallOption) (*CreateMeetResponse, error)
}

type meetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetServiceClient(cc grpc.ClientConnInterface) MeetServiceClient {
	return &meetServiceClient{cc}
}

func (c *meetServiceClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryResponse)
	err := c.cc.Invoke(ctx, MeetService_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) GetFuture(ctx context.Context, in *GetFutureRequest, opts ...grpc.CallOption) (*GetFutureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFutureResponse)
	err := c.cc.Invoke(ctx, MeetService_GetFuture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) ApproveMeet(ctx context.Context, in *ApproveMeetRequest, opts ...grpc.CallOption) (*ApproveMeetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveMeetResponse)
	err := c.cc.Invoke(ctx, MeetService_ApproveMeet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) CreateMeet(ctx context.Context, in *CreateMeetRequest, opts ...grpc.CallOption) (*CreateMeetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeetResponse)
	err := c.cc.Invoke(ctx, MeetService_CreateMeet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetServiceServer is the server API for MeetService service.
// All implementations must embed UnimplementedMeetServiceServer
// for forward compatibility.
type MeetServiceServer interface {
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	GetFuture(context.Context, *GetFutureRequest) (*GetFutureResponse, error)
	ApproveMeet(context.Context, *ApproveMeetRequest) (*ApproveMeetResponse, error)
	CreateMeet(context.Context, *CreateMeetRequest) (*CreateMeetResponse, error)
	mustEmbedUnimplementedMeetServiceServer()
}

// UnimplementedMeetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeetServiceServer struct{}

func (UnimplementedMeetServiceServer) GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedMeetServiceServer) GetFuture(context.Context, *GetFutureRequest) (*GetFutureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuture not implemented")
}
func (UnimplementedMeetServiceServer) ApproveMeet(context.Context, *ApproveMeetRequest) (*ApproveMeetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveMeet not implemented")
}
func (UnimplementedMeetServiceServer) CreateMeet(context.Context, *CreateMeetRequest) (*CreateMeetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeet not implemented")
}
func (UnimplementedMeetServiceServer) mustEmbedUnimplementedMeetServiceServer() {}
func (UnimplementedMeetServiceServer) testEmbeddedByValue()                     {}

// UnsafeMeetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetServiceServer will
// result in compilation errors.
type UnsafeMeetServiceServer interface {
	mustEmbedUnimplementedMeetServiceServer()
}

func RegisterMeetServiceServer(s grpc.ServiceRegistrar, srv MeetServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeetService_ServiceDesc, srv)
}

func _MeetService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetService_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_GetFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFutureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).GetFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetService_GetFuture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).GetFuture(ctx, req.(*GetFutureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_ApproveMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).ApproveMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetService_ApproveMeet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).ApproveMeet(ctx, req.(*ApproveMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_CreateMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).CreateMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetService_CreateMeet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).CreateMeet(ctx, req.(*CreateMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetService_ServiceDesc is the grpc.ServiceDesc for MeetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meet.MeetService",
	HandlerType: (*MeetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _MeetService_GetHistory_Handler,
		},
		{
			MethodName: "GetFuture",
			Handler:    _MeetService_GetFuture_Handler,
		},
		{
			MethodName: "ApproveMeet",
			Handler:    _MeetService_ApproveMeet_Handler,
		},
		{
			MethodName: "CreateMeet",
			Handler:    _MeetService_CreateMeet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meet/meet.proto",
}
